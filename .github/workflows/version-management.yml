name: Gestion des Versions et Changelog

on:
    workflow_dispatch:
        inputs:
            version_type:
                description: "Type de version (major, minor, patch)"
                required: true
                default: "patch"
                type: choice
                options:
                    - major
                    - minor
                    - patch
            release_notes:
                description: "Notes de release (optionnel)"
                required: false
                type: string
    push:
        branches:
            - main
        paths:
            - "package.json"
            - "app.json"
            - "CHANGELOG.md"

jobs:
    check-version:
        name: V√©rification des Versions
        runs-on: ubuntu-latest
        outputs:
            needs_version_update: ${{ steps.check.outputs.needs_update }}
            current_version: ${{ steps.check.outputs.current_version }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            - name: V√©rifier les versions
              id: check
              run: |
                  # R√©cup√©rer la version actuelle
                  CURRENT_VERSION=$(node -p "require('./package.json').version")
                  echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

                  # V√©rifier si des changements n√©cessitent une mise √† jour de version
                  if git log --oneline -10 | grep -E "(feat|fix|breaking|security)" > /dev/null; then
                    echo "needs_update=true" >> $GITHUB_OUTPUT
                    echo "üì¶ Version actuelle: $CURRENT_VERSION"
                    echo "üîÑ Mise √† jour n√©cessaire: true"
                  else
                    echo "needs_update=false" >> $GITHUB_OUTPUT
                    echo "üì¶ Version actuelle: $CURRENT_VERSION"
                    echo "üîÑ Mise √† jour n√©cessaire: false"
                  fi

    update-version:
        name: Mise √† Jour de Version
        runs-on: ubuntu-latest
        needs: check-version
        outputs:
            new_version: ${{ steps.version.outputs.new_version }}
            changelog: ${{ steps.changelog.outputs.changelog }}
        if: |
            github.event_name == 'workflow_dispatch' ||
            (github.event_name == 'push' && needs.check-version.outputs.needs_version_update == 'true')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            - name: Configuration Git
              run: |
                  git config --local user.email "action@github.com"
                  git config --local user.name "GitHub Action"

            - name: Mettre √† jour la version
              id: version
              run: |
                  # D√©terminer le type de version
                  if [ "${{ github.event.inputs.version_type }}" != "" ]; then
                    VERSION_TYPE="${{ github.event.inputs.version_type }}"
                  else
                    # Analyser les commits pour d√©terminer le type
                    if git log --oneline -10 | grep -E "breaking" > /dev/null; then
                      VERSION_TYPE="major"
                    elif git log --oneline -10 | grep -E "feat" > /dev/null; then
                      VERSION_TYPE="minor"
                    else
                      VERSION_TYPE="patch"
                    fi
                  fi

                  echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT

                  # Mettre √† jour package.json
                  npm version $VERSION_TYPE --no-git-tag-version

                  # Mettre √† jour app.json
                  NEW_VERSION=$(node -p "require('./package.json').version")
                  sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" app.json

                  echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "üöÄ Nouvelle version: $NEW_VERSION ($VERSION_TYPE)"

            - name: G√©n√©rer le changelog
              id: changelog
              run: |
                  # G√©n√©rer le changelog depuis le dernier tag
                  LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

                  if [ -z "$LAST_TAG" ]; then
                    # Premi√®re version
                    CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
                  else
                    # Depuis le dernier tag
                    CHANGELOG=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
                  fi

                  # Filtrer et formater le changelog
                  FORMATTED_CHANGELOG=$(echo "$CHANGELOG" | sed 's/^/- /' | grep -v "Merge\|chore\|docs" | head -15)

                  echo "changelog<<EOF" >> $GITHUB_OUTPUT
                  echo "$FORMATTED_CHANGELOG" >> $GITHUB_OUTPUT
                  echo "EOF" >> $GITHUB_OUTPUT

                  echo "üìù Changelog g√©n√©r√©:"
                  echo "$FORMATTED_CHANGELOG"

            - name: Mettre √† jour le CHANGELOG.md
              run: |
                  NEW_VERSION="${{ steps.version.outputs.new_version }}"
                  CHANGELOG="${{ steps.changelog.outputs.changelog }}"

                  # Utiliser la date du dernier commit pour plus de coh√©rence
                  COMMIT_DATE=$(git log -1 --format=%cd --date=format:%Y-%m-%d)
                  echo "üìÖ Date du dernier commit: $COMMIT_DATE"

                  # Cr√©er la nouvelle section de version 
                  echo "## [$NEW_VERSION] - $COMMIT_DATE" > temp_changelog.md
                  echo "" >> temp_changelog.md
                  echo "$CHANGELOG" >> temp_changelog.md
                  echo "" >> temp_changelog.md

                  # Ins√©rer apr√®s la section [Unreleased]
                  awk '
                  /^## \[Unreleased\]/ {
                      print; 
                      print "";
                      # Ins√©rer le nouveau contenu
                      system("cat temp_changelog.md");
                      next;
                  }
                  { print }
                  ' CHANGELOG.md > CHANGELOG_new.md

                  mv CHANGELOG_new.md CHANGELOG.md
                  rm -f temp_changelog.md

                  echo "üìÑ CHANGELOG.md mis √† jour avec la date du commit: $COMMIT_DATE"

            - name: Commit et push des changements
              run: |
                  git add package.json app.json CHANGELOG.md
                  git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
                  git push

            - name: Cr√©er le tag de release
              run: |
                  git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
                  git push origin "v${{ steps.version.outputs.new_version }}"

    create-release:
        name: Cr√©er la Release GitHub
        runs-on: ubuntu-latest
        needs: update-version
        if: github.event_name == 'workflow_dispatch'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Cr√©er la release
              uses: softprops/action-gh-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: v${{ needs.update-version.outputs.new_version }}
                  name: Release v${{ needs.update-version.outputs.new_version }}
                  body: |
                      ## üöÄ Nouvelle Version ${{ needs.update-version.outputs.new_version }}

                      ### üìù Changements
                      ${{ needs.update-version.outputs.changelog }}

                      ### üì¶ Installation
                      ```bash
                      npm install
                      ```

                      ### üîß Configuration
                      V√©rifiez que votre `app.json` et `package.json` sont √† jour.

                      ---
                      *Release g√©n√©r√©e automatiquement par GitHub Actions*
                  draft: false
                  prerelease: false

    notify-team:
        name: Notification √âquipe
        runs-on: ubuntu-latest
        needs: [update-version, create-release]
        if: always()

        steps:
            - name: Notification (optionnel)
              run: |
                  echo "üì¢ Notification de release"
                  echo "Version: ${{ needs.update-version.outputs.new_version }}"
                  echo "Pour activer les notifications Slack:"
                  echo "1. Configurer SLACK_WEBHOOK_URL comme secret du repository"
                  echo "2. D√©commenter le code curl dans ce workflow"

            - name: R√©sum√© de la release
              run: |
                  echo "## üéâ Release v${{ needs.update-version.outputs.new_version }} cr√©√©e avec succ√®s!" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üìù Changements" >> $GITHUB_STEP_SUMMARY
                  echo "${{ needs.update-version.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### üîó Liens" >> $GITHUB_STEP_SUMMARY
                  echo "- [Release GitHub](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.update-version.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
                  echo "- [Changelog complet](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY
